// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/coffee.proto

package coffee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoffeeService_GetBestTypeCoffee_FullMethodName = "/coffee.CoffeeService/GetBestTypeCoffee"
)

// CoffeeServiceClient is the client API for CoffeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CoffeeService defines the gRPC services for retrieving coffee data.
type CoffeeServiceClient interface {
	GetBestTypeCoffee(ctx context.Context, in *GetBestTypeCoffeeRequest, opts ...grpc.CallOption) (*GetBestTypeCoffeeResponse, error)
}

type coffeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoffeeServiceClient(cc grpc.ClientConnInterface) CoffeeServiceClient {
	return &coffeeServiceClient{cc}
}

func (c *coffeeServiceClient) GetBestTypeCoffee(ctx context.Context, in *GetBestTypeCoffeeRequest, opts ...grpc.CallOption) (*GetBestTypeCoffeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBestTypeCoffeeResponse)
	err := c.cc.Invoke(ctx, CoffeeService_GetBestTypeCoffee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoffeeServiceServer is the server API for CoffeeService service.
// All implementations must embed UnimplementedCoffeeServiceServer
// for forward compatibility.
//
// CoffeeService defines the gRPC services for retrieving coffee data.
type CoffeeServiceServer interface {
	GetBestTypeCoffee(context.Context, *GetBestTypeCoffeeRequest) (*GetBestTypeCoffeeResponse, error)
	mustEmbedUnimplementedCoffeeServiceServer()
}

// UnimplementedCoffeeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoffeeServiceServer struct{}

func (UnimplementedCoffeeServiceServer) GetBestTypeCoffee(context.Context, *GetBestTypeCoffeeRequest) (*GetBestTypeCoffeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestTypeCoffee not implemented")
}
func (UnimplementedCoffeeServiceServer) mustEmbedUnimplementedCoffeeServiceServer() {}
func (UnimplementedCoffeeServiceServer) testEmbeddedByValue()                       {}

// UnsafeCoffeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoffeeServiceServer will
// result in compilation errors.
type UnsafeCoffeeServiceServer interface {
	mustEmbedUnimplementedCoffeeServiceServer()
}

func RegisterCoffeeServiceServer(s grpc.ServiceRegistrar, srv CoffeeServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoffeeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoffeeService_ServiceDesc, srv)
}

func _CoffeeService_GetBestTypeCoffee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBestTypeCoffeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeeServiceServer).GetBestTypeCoffee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoffeeService_GetBestTypeCoffee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeeServiceServer).GetBestTypeCoffee(ctx, req.(*GetBestTypeCoffeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoffeeService_ServiceDesc is the grpc.ServiceDesc for CoffeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoffeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coffee.CoffeeService",
	HandlerType: (*CoffeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBestTypeCoffee",
			Handler:    _CoffeeService_GetBestTypeCoffee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/coffee.proto",
}
